<configuration debug="true" scan="true" scanPeriod="30 seconds" packagingData="false">
    <springProfile name="uat">
        <!--logback 不需要DTD 文件,节点不区分大小写-->
        <!--日志存放路径,windows会将日志存放到当前磁盘 c:/opt/logs/spring-boot-with-sl4j-logback-sample/uat-api/*.log -->
        <!--日志存放路径,Linux会将日志存放到当前磁盘 /opt/logs/spring-boot-with-sl4j-logback-sample/uat-api/*.log -->
        <property scope="context" name="APP_NAME" value="spring-boot-with-sl4j-logback-sample"/>
        <property scope="context" name="LOG_FILE_PATH" value="/opt/logs/${APP_NAME}/uat-api/" />
        <property scope="context" name="APP_PACKAGE_BASE_PATH" value="com.xingyun.springbootwithlogback" />
        <property scope="context" name="APP_PACKAGE_DAO_PATH" value="com.xingyun.springbootwithlogback.dao" />

        <!--配置输出到控制台-->
        <!-- Appender 有两个属性name 和class可以配置
             name属性指定appender的名称，而class属性指定要实例化的appender类的完全限定名称
            <appender>元素可以包含零个或一个<layout>元素，零个或多个<encoder>元素以及零个或多个<filter>元素。 -->
        <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
            <!--
            <encoder>
            默认使用 ch.qos.logback.classic.encoder.PatternLayoutEncoder 实现类
            如果使用自定义类，则需要指定完全限定名称
            如下所示:
            <encoder class="com.xingyun.customize.MyPatternLayoutEncoder">
              -->
            <encoder>
                <!--配置控制台输出格式，由于是控制台，我这里调成了日志高亮显示 -->
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) --- %cyan(%logger{36}) --- %c:%L:%n%m%n</pattern>
            </encoder>
        </appender>
        <!--配置输出到文件 主日志 -->
        <appender name="FILE_MAIN_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <!--配置日志输出的文件路径和名称-->
            <file>${LOG_FILE_PATH}/${APP_NAME}-main.log</file>
            <!--配置日志是追加还是覆盖重写,默认值true-->
            <append>true</append>
            <!--配置日志是否立即刷新,默认值true -->
            <immediateFlush>true</immediateFlush>
            <encoder>
                <!--配置日志输出格式,这里没有使用高亮显示，因为使用了也没用。 -->
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level --- %logger{36} --- %c:%L:%n%m%n</pattern>
            </encoder>
            <!--日志滚动策略，这里配置根据大小和日期自动滚动 -->
            <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
                <!-- 首先按照每天滚动，根据日志放到不同文件夹中，最后根据大小进行滚动分割 -->
                <fileNamePattern>${LOG_FILE_PATH}/%d{yyyy-MM-dd,aux}/${APP_NAME}-main-%d{yyyy-MM-dd,UTC}.%i.log</fileNamePattern>
                <!-- 每个日志文件至少 100MB,保存30天,但是所有日志占用空间最大不能超过 20GB，超过后清理较旧的日志 -->
                <maxFileSize>100MB</maxFileSize>
                <maxHistory>2</maxHistory>
                <totalSizeCap>20GB</totalSizeCap>
                <!--启动时候清理日志-->
                <cleanHistoryOnStart>false</cleanHistoryOnStart>
                <!--  可选的totalSizeCap属性控制所有存档文件的总大小。-->
                <!--  超过总大小上限时，将异步删除最旧的归档。-->
                <!--  totalSizeCap属性也需要设置maxHistory属性。 -->
                <!-- 此外，始终首先应用“最大历史记录”限制，然后应用“总大小上限”限制。-->
            </rollingPolicy>
        </appender>

        <!--配置输出到文件 错误日志 -->
        <appender name="FILE_ERROR_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <!--配置日志输出的文件路径和名称-->
            <file>${LOG_FILE_PATH}/${APP_NAME}-error.log</file>
            <!--配置日志是追加还是覆盖重写,默认值true-->
            <append>true</append>
            <!--配置日志是否立即刷新,默认值true -->
            <immediateFlush>true</immediateFlush>
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>ERROR</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
            </filter>
            <encoder>
                <!--配置日志输出格式,这里没有使用高亮显示，因为使用了也没用。 -->
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level --- %logger{36} --- %c:%L:%n%m%n</pattern>
            </encoder>
            <!--日志滚动策略，这里配置根据大小和日期自动滚动 -->
            <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
                <!-- 首先按照每天滚动，根据日志放到不同文件夹中，最后根据大小进行滚动分割 -->
                <fileNamePattern>${LOG_FILE_PATH}/%d{yyyy-MM-dd,aux}/${APP_NAME}-error-%d{yyyy-MM-dd,UTC}.%i.log</fileNamePattern>
                <!-- 每个日志文件至少 100MB,保存30天,但是所有日志占用空间最大不能超过 20GB，超过后清理较旧的日志 -->
                <maxFileSize>100MB</maxFileSize>
                <maxHistory>2</maxHistory>
                <totalSizeCap>20GB</totalSizeCap>
                <!--启动时候清理日志-->
                <cleanHistoryOnStart>false</cleanHistoryOnStart>
                <!--  可选的totalSizeCap属性控制所有存档文件的总大小。-->
                <!--  超过总大小上限时，将异步删除最旧的归档。-->
                <!--  totalSizeCap属性也需要设置maxHistory属性。 -->
                <!-- 此外，始终首先应用“最大历史记录”限制，然后应用“总大小上限”限制。-->
            </rollingPolicy>
        </appender>

        <!--配置输出到文件 DEBUG日志 -->
        <appender name="FILE_DEBUG_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <!--配置日志输出的文件路径和名称-->
            <file>${LOG_FILE_PATH}/${APP_NAME}-debug.log</file>
            <!--配置日志是追加还是覆盖重写,默认值true-->
            <append>true</append>
            <!--配置日志是否立即刷新,默认值true -->
            <immediateFlush>true</immediateFlush>
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>DEBUG</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
            </filter>
            <encoder>
                <!--配置日志输出格式,这里没有使用高亮显示，因为使用了也没用。 -->
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level --- %logger{36} --- %c:%L:%n%m%n</pattern>
            </encoder>
            <!--日志滚动策略，这里配置根据大小和日期自动滚动 -->
            <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
                <!-- 首先按照每天滚动，根据日志放到不同文件夹中，最后根据大小进行滚动分割 -->
                <fileNamePattern>${LOG_FILE_PATH}/%d{yyyy-MM-dd,aux}/${APP_NAME}-debug-%d{yyyy-MM-dd,UTC}.%i.log</fileNamePattern>
                <!-- 每个日志文件至少 100MB,保存30天,但是所有日志占用空间最大不能超过 20GB，超过后清理较旧的日志 -->
                <maxFileSize>100MB</maxFileSize>
                <maxHistory>2</maxHistory>
                <totalSizeCap>20GB</totalSizeCap>
                <!--启动时候清理日志-->
                <cleanHistoryOnStart>false</cleanHistoryOnStart>
                <!--  可选的totalSizeCap属性控制所有存档文件的总大小。-->
                <!--  超过总大小上限时，将异步删除最旧的归档。-->
                <!--  totalSizeCap属性也需要设置maxHistory属性。 -->
                <!-- 此外，始终首先应用“最大历史记录”限制，然后应用“总大小上限”限制。-->
            </rollingPolicy>
        </appender>

        <!--配置根节点日志记录器
        <root>元素配置根记录器,它支持单个属性，即level属性。它不允许任何其他属性。
        <root>的level 可选值:TRACE，DEBUG，INFO，WARN，ERROR，ALL或OFF  -->
        <root level="INFO">
            <appender-ref ref="STDOUT" />
            <appender-ref ref="FILE_MAIN_LOG" />
            <appender-ref ref="FILE_ERROR_LOG" />
            <appender-ref ref="FILE_DEBUG_LOG" />
        </root>

        <!--自定义修改
           这里修改为自己应用的包名，配置应用日志记录器
           additivity="true" 是默认值，如果是true 可以省略不写
           由于使用了additivity="true"会继承自root节点的追加配置，将日志追加到控制台和文件中
           -->
        <logger name="${APP_PACKAGE_BASE_PATH}" level="INFO" additivity="true"/>
        <!-- 如果想打印SQL,则一般需要将相关包设置为DEBUG级别 -->
        <logger name="${APP_PACKAGE_DAO_PATH}" level="DEBUG" additivity="true"/>
    </springProfile>
</configuration>